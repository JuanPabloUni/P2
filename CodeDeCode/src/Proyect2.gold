//Imports
using gold.**

//Declaration of Variables
var A
var B

//Main Method/Function
procedure main(args:String[]) begin
	var sc:java.util.Scanner(System.$in)
    
    A = ('a'‥'z')
    B = ('0'‥'9')
    
    //Creates the Coder and Decoder objects.
	coder:=createCoder()
   	deCoder:=createDecoder()
    
    //Shows the interface for testing the Coder and Decoder.
    GAutomataFrame.show(coder)
    GAutomataFrame.show(deCoder)
	
	//Calls the Utilities class which has all the test methods.
  	Utilities.testCodeDecode(coder,deCoder)
		
end

//Creates the Coder based on the specified language and its requirements.
function createCoder():ITransducer begin
	
	Q:= {⟨d,pos⟩ | d in ('a'‥'z'),0 <= pos < 4  }  ∪ {"I","E","fin"} ∪ ('a'‥'z')
	Σ := ('a'‥'z')∪{' ', '$'}
	Σ´:= Σ∪{'0', '1', '2'}∪{'#', '*', '@'}
	q₀ := "I"
	F := {⟨d,pos⟩ | d in ('a'‥'z'),0 <= pos < 4  }

	return 	GDeterministicTransducer(Q,Σ,Σ´,q₀,F,δ,g,h)
end

//Transition Functions: Changes the state of what is being coded. 
function δ(state,input) begin
   while input != ' ' and state = 'I' do
   	  if state ∈{"fin","E"} then return "E"
	  elseif state='$' then return "fin"
	  elseif state = "I"  and input = ' '   then return ⟨state[0],0⟩	
	   elseif state = "I" and input in ('a'‥'z') then 
  		d,pos:=state[0], state[1]
  		return ⟨d,(pos+1)⟩
       end  
    end

end



//Transition Functions: Changes the state of what is being coded. 
function h(state,input) begin
   
 
   	if state="I" and input in { '2', '3', '5'}  then return input
 	elseif state in {2,3,5} and input in ('a'‥'z') then return input
  	elseif state in {2,3,5,"I","E"} then return λ
 	elseif |state| = 2  and input = ':'   then return ":"
  	elseif |state| = 3 and input in ('a'‥'z') then 
  	 	d,s,pos:=state[0], state[1], state[2]
   		if 0 = pos and input =s  then return "#"
   		elseif pos=1 then return shiftSymbol(input,d)
   		else return input
   	end
   else return λ
end

end

//
function g(s) begin
	return λ
end

//Creates the Decoder which functions based on the Coder's stipulations.
function createDecoder():ITransducer begin
	
	Q:= {⟨d,s,pos⟩ | d in {'a'‥'z'}, s in {0, 1, 2}, 0 <= pos < 4} ∪ {0,1,2,"I","E"} ∪ {0,1,2} × ('a'‥'z')
	Σ := ('a'‥'z')∪{' ', '$'}∪{'0', '1', '2'}∪{'#', '*', '@'}
	Σ´:= ('a'‥'z')∪{' ', '$'}
	q₀ := "I"
	F := {⟨d,s,pos⟩ | d in ('a'‥'z'), s in {0, 1, 2}, 0 <= pos < 4}

	return 	GDeterministicTransducer(Q,Σ,Σ´,q₀,F,δ1,g,h1)
end

	
	
	
function δ1(state,input) begin
  if state="I" and input in { '2', '3', '5'}  then return input - '0'
  elseif state in {2,3,5} and input in ('a'‥'z') then return ⟨state, input,"_"⟩
  else return "E"
  end
end

// ------

function δ1(⟨d,s,pos⟩,input) begin
  if pos="_" and input = ':' then return ⟨d,s,1⟩
  elseif pos="_"  then return "E"
  elseif input = '#' and pos!=0 then return "E"
  elseif input = s and pos =0 then return "E"
  elseif input in ('a'‥'z')∪{'#'} then return ⟨d,s,(pos+1)%d⟩
  else return "E"
  end
end

function h1(state,input) begin 
  if state="I" and input in { '2', '3', '5'}  then return input-'0' 
  elseif state in {2,3,5} and input in ('a'‥'z') then return input
  else return λ
  end
end

function h1(⟨d,s,pos⟩,input) begin
 	if pos="_" and input = ':' then return input
    elseif input = '#' and pos=0 then return s
 	elseif input in ('a'‥'z') and pos=1 then return shiftSymbol(input,-d)
 	elseif input in ('a'‥'z')  then return input
   	else return λ
  	end
end

//Function designed to get to the specified symbol via shifting. The function starts at 0, a or A and moves the specified amount.
 function shiftSymbol(symbol, shift) begin
	var  r : Character
   
  	if symbol in ('a'‥'z') then
	r:= 'a' + (symbol -'a'+ shift)% 26
	elseif symbol in ('A'‥'Z') then
	r:= 'A' + (symbol -'A'+ shift)% 26
	elseif  symbol in ('0'‥'9') then
	r:= '0' + (symbol -'0'+ shift)% 10
	else r:= r
	end		
	return r
end